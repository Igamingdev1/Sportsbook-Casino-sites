{"version":3,"file":"static/js/79.d56a9927.chunk.js","mappings":"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","sources":["utils/games.ts","utils/number.tsx","../node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js","../node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js","../node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js","../node_modules/@mui/material/ToggleButton/toggleButtonClasses.js","../node_modules/@mui/material/ToggleButton/ToggleButton.js"],"sourcesContent":["import $ from 'jquery';\r\nimport { toNumber } from './number';\r\nexport var resultPopup = function (game) {\r\n    var status = game.status.toLowerCase();\r\n    var popup = $(\"<div class='resultPopup resultPopup-\".concat(status, \"'>\\n            <div class='multiplier'>\").concat(Number(game.odds).toFixed(2), \"x</div>\\n            <div class='divider'></div>\\n            <div class='profit'>\").concat(game.profit === 0 ? '0.00' : toNumber(game.profit), \"</div>\\n        </div>\\n    \"));\r\n    $('.game-content').append(popup);\r\n    popup.hide().fadeIn('fast');\r\n    setTimeout(function () {\r\n        // eslint-disable-next-line\r\n        popup.fadeOut('fast', function () {\r\n            $(this).remove();\r\n        });\r\n    }, 2000);\r\n};\r\nexport var Random = function (min, max, floor) {\r\n    if (floor === void 0) { floor = true; }\r\n    var r = Math.random() * max + min;\r\n    return floor ? Math.floor(r) : r;\r\n};\r\nexport var chain = function (times, ms, cb) {\r\n    var i = 0;\r\n    var next = function () {\r\n        if (i < times) {\r\n            setTimeout(function () {\r\n                cb(i);\r\n                next();\r\n            }, ms);\r\n            i += 1;\r\n        }\r\n    };\r\n    next();\r\n};\r\n","import { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport NumberFormat from 'react-number-format';\r\nexport var toNumber = function (number, fixed, status) {\r\n    if (fixed === void 0) { fixed = 5; }\r\n    if (status === void 0) { status = false; }\r\n    if (!number || isNaN(number)) {\r\n        if (status) {\r\n            return Number(0).toFixed(fixed);\r\n        }\r\n        return '0.00';\r\n    }\r\n    if (status) {\r\n        return Number(number).toFixed(fixed).toLocaleString();\r\n    }\r\n    return Number(Number(number).toFixed(fixed)).toLocaleString();\r\n};\r\nexport var toNumberTag = function (number, fixed) {\r\n    if (number === void 0) { number = 0; }\r\n    if (fixed === void 0) { fixed = 5; }\r\n    if (!number || isNaN(number)) {\r\n        return '0.00';\r\n    }\r\n    return _jsx(NumberFormat, { value: Number(Number(number).toFixed(fixed)), displayType: \"text\", thousandSeparator: true });\r\n};\r\n","// Determine if the toggle button value matches, or is contained in, the\n// candidate group value.\nexport default function isValueSelected(value, candidate) {\n  if (candidate === undefined || value === undefined) {\n    return false;\n  }\n  if (Array.isArray(candidate)) {\n    return candidate.indexOf(value) >= 0;\n  }\n  return value === candidate;\n}","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getToggleButtonGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiToggleButtonGroup', slot);\n}\nconst toggleButtonGroupClasses = generateUtilityClasses('MuiToggleButtonGroup', ['root', 'selected', 'vertical', 'disabled', 'grouped', 'groupedHorizontal', 'groupedVertical']);\nexport default toggleButtonGroupClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"disabled\", \"exclusive\", \"fullWidth\", \"onChange\", \"orientation\", \"size\", \"value\"];\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport isValueSelected from './isValueSelected';\nimport toggleButtonGroupClasses, { getToggleButtonGroupUtilityClass } from './toggleButtonGroupClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    orientation,\n    fullWidth,\n    disabled\n  } = ownerState;\n  const slots = {\n    root: ['root', orientation === 'vertical' && 'vertical', fullWidth && 'fullWidth'],\n    grouped: ['grouped', `grouped${capitalize(orientation)}`, disabled && 'disabled']\n  };\n  return composeClasses(slots, getToggleButtonGroupUtilityClass, classes);\n};\nconst ToggleButtonGroupRoot = styled('div', {\n  name: 'MuiToggleButtonGroup',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [{\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles.grouped\n    }, {\n      [`& .${toggleButtonGroupClasses.grouped}`]: styles[`grouped${capitalize(ownerState.orientation)}`]\n    }, styles.root, ownerState.orientation === 'vertical' && styles.vertical, ownerState.fullWidth && styles.fullWidth];\n  }\n})(({\n  ownerState,\n  theme\n}) => _extends({\n  display: 'inline-flex',\n  borderRadius: (theme.vars || theme).shape.borderRadius\n}, ownerState.orientation === 'vertical' && {\n  flexDirection: 'column'\n}, ownerState.fullWidth && {\n  width: '100%'\n}, {\n  [`& .${toggleButtonGroupClasses.grouped}`]: _extends({}, ownerState.orientation === 'horizontal' ? {\n    '&:not(:first-of-type)': {\n      marginLeft: -1,\n      borderLeft: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0\n    },\n    '&:not(:last-of-type)': {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n      borderLeft: 0,\n      marginLeft: 0\n    }\n  } : {\n    '&:not(:first-of-type)': {\n      marginTop: -1,\n      borderTop: '1px solid transparent',\n      borderTopLeftRadius: 0,\n      borderTopRightRadius: 0\n    },\n    '&:not(:last-of-type)': {\n      borderBottomLeftRadius: 0,\n      borderBottomRightRadius: 0\n    },\n    [`&.${toggleButtonGroupClasses.selected} + .${toggleButtonGroupClasses.grouped}.${toggleButtonGroupClasses.selected}`]: {\n      borderTop: 0,\n      marginTop: 0\n    }\n  })\n}));\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef(function ToggleButtonGroup(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiToggleButtonGroup'\n  });\n  const {\n      children,\n      className,\n      color = 'standard',\n      disabled = false,\n      exclusive = false,\n      fullWidth = false,\n      onChange,\n      orientation = 'horizontal',\n      size = 'medium',\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    disabled,\n    fullWidth,\n    orientation,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    const index = value && value.indexOf(buttonValue);\n    let newValue;\n    if (value && index >= 0) {\n      newValue = value.slice();\n      newValue.splice(index, 1);\n    } else {\n      newValue = value ? value.concat(buttonValue) : [buttonValue];\n    }\n    onChange(event, newValue);\n  };\n  const handleExclusiveChange = (event, buttonValue) => {\n    if (!onChange) {\n      return;\n    }\n    onChange(event, value === buttonValue ? null : buttonValue);\n  };\n  return /*#__PURE__*/_jsx(ToggleButtonGroupRoot, _extends({\n    role: \"group\",\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: React.Children.map(children, child => {\n      if (! /*#__PURE__*/React.isValidElement(child)) {\n        return null;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        if (isFragment(child)) {\n          console.error([\"MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n        }\n      }\n      return /*#__PURE__*/React.cloneElement(child, {\n        className: clsx(classes.grouped, child.props.className),\n        onChange: exclusive ? handleExclusiveChange : handleChange,\n        selected: child.props.selected === undefined ? isValueSelected(child.props.value, value) : child.props.selected,\n        size: child.props.size || size,\n        fullWidth,\n        color: child.props.color || color,\n        disabled: child.props.disabled || disabled\n      });\n    })\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButtonGroup.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the button when it is selected.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'standard'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   * @default false\n   */\n  exclusive: PropTypes.bool,\n  /**\n   * If `true`, the button group will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange: PropTypes.func,\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default ToggleButtonGroup;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getToggleButtonUtilityClass(slot) {\n  return generateUtilityClass('MuiToggleButton', slot);\n}\nconst toggleButtonClasses = generateUtilityClasses('MuiToggleButton', ['root', 'disabled', 'selected', 'standard', 'primary', 'secondary', 'sizeSmall', 'sizeMedium', 'sizeLarge']);\nexport default toggleButtonClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"disabled\", \"disableFocusRipple\", \"fullWidth\", \"onChange\", \"onClick\", \"selected\", \"size\", \"value\"];\n// @inheritedComponent ButtonBase\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { alpha } from '../styles';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport toggleButtonClasses, { getToggleButtonUtilityClass } from './toggleButtonClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    fullWidth,\n    selected,\n    disabled,\n    size,\n    color\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled', fullWidth && 'fullWidth', `size${capitalize(size)}`, color]\n  };\n  return composeClasses(slots, getToggleButtonUtilityClass, classes);\n};\nconst ToggleButtonRoot = styled(ButtonBase, {\n  name: 'MuiToggleButton',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`size${capitalize(ownerState.size)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  let selectedColor = ownerState.color === 'standard' ? theme.palette.text.primary : theme.palette[ownerState.color].main;\n  let selectedColorChannel;\n  if (theme.vars) {\n    selectedColor = ownerState.color === 'standard' ? theme.vars.palette.text.primary : theme.vars.palette[ownerState.color].main;\n    selectedColorChannel = ownerState.color === 'standard' ? theme.vars.palette.text.primaryChannel : theme.vars.palette[ownerState.color].mainChannel;\n  }\n  return _extends({}, theme.typography.button, {\n    borderRadius: (theme.vars || theme).shape.borderRadius,\n    padding: 11,\n    border: `1px solid ${(theme.vars || theme).palette.divider}`,\n    color: (theme.vars || theme).palette.action.active\n  }, ownerState.fullWidth && {\n    width: '100%'\n  }, {\n    [`&.${toggleButtonClasses.disabled}`]: {\n      color: (theme.vars || theme).palette.action.disabled,\n      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`\n    },\n    '&:hover': {\n      textDecoration: 'none',\n      // Reset on mouse devices\n      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    },\n    [`&.${toggleButtonClasses.selected}`]: {\n      color: selectedColor,\n      backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity),\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n        // Reset on touch devices, it doesn't add specificity\n        '@media (hover: none)': {\n          backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(selectedColor, theme.palette.action.selectedOpacity)\n        }\n      }\n    }\n  }, ownerState.size === 'small' && {\n    padding: 7,\n    fontSize: theme.typography.pxToRem(13)\n  }, ownerState.size === 'large' && {\n    padding: 15,\n    fontSize: theme.typography.pxToRem(15)\n  });\n});\nconst ToggleButton = /*#__PURE__*/React.forwardRef(function ToggleButton(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiToggleButton'\n  });\n  const {\n      children,\n      className,\n      color = 'standard',\n      disabled = false,\n      disableFocusRipple = false,\n      fullWidth = false,\n      onChange,\n      onClick,\n      selected,\n      size = 'medium',\n      value\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    disabled,\n    disableFocusRipple,\n    fullWidth,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = event => {\n    if (onClick) {\n      onClick(event, value);\n      if (event.defaultPrevented) {\n        return;\n      }\n    }\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n  return /*#__PURE__*/_jsx(ToggleButtonRoot, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    ownerState: ownerState,\n    \"aria-pressed\": selected\n  }, other, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButton.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the button when it is in an active state.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'standard'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['standard', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * If `true`, the button will take up the full width of its container.\n   * @default false\n   */\n  fullWidth: PropTypes.bool,\n  /**\n   * Callback fired when the state changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the button is clicked.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onClick: PropTypes.func,\n  /**\n   * If `true`, the button is rendered in an active state.\n   */\n  selected: PropTypes.bool,\n  /**\n   * The size of the component.\n   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes /* @typescript-to-proptypes-ignore */.any.isRequired\n} : void 0;\nexport default ToggleButton;"],"names":["resultPopup","game","status","toLowerCase","popup","$","concat","Number","odds","toFixed","profit","toNumber","append","hide","fadeIn","setTimeout","fadeOut","this","remove","Random","min","max","floor","r","Math","random","chain","times","ms","cb","i","next","number","fixed","isNaN","toLocaleString","toNumberTag","_jsx","NumberFormat","value","displayType","thousandSeparator","isValueSelected","candidate","undefined","Array","isArray","indexOf","getToggleButtonGroupUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","ToggleButtonGroupRoot","styled","name","overridesResolver","props","styles","ownerState","_defineProperty","toggleButtonGroupClasses","grouped","capitalize","orientation","root","vertical","fullWidth","_ref3","theme","_extends","display","borderRadius","vars","shape","flexDirection","width","marginLeft","borderLeft","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","marginTop","borderTop","React","inProps","ref","useThemeProps","children","className","_props$color","color","_props$disabled","disabled","_props$exclusive","exclusive","_props$fullWidth","onChange","_props$orientation","_props$size","size","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","handleChange","event","buttonValue","newValue","index","slice","splice","handleExclusiveChange","role","clsx","child","selected","getToggleButtonUtilityClass","ToggleButtonRoot","ButtonBase","_ref","_extends2","selectedColorChannel","selectedColor","palette","text","primary","main","primaryChannel","mainChannel","typography","button","padding","border","divider","action","active","toggleButtonClasses","disabledBackground","textDecoration","backgroundColor","hoverOpacity","alpha","selectedOpacity","fontSize","pxToRem","_props$disableFocusRi","disableFocusRipple","onClick","focusRipple","defaultPrevented"],"sourceRoot":""}